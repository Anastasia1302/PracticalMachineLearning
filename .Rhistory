require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
install.packages("data.table")
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(rbind(D1, D2))
system.time(rbindlist(list(D1, D2)))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
identical(D3, D4)
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), z=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
require(data.table)
n <- 1E6
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
require(data.table)
n <- 1E8
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
gc()
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
help(data.table)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?qplot
ggplot(concrete, aes(x=seq(1:nrow(concrete)), y=CompressiveStrength)) +
geom_line()
rownum(concrete)
??rownum
rownames(concrete)
View(concrete)
ggplot(concrete, aes(x=rownames(concrete), y=CompressiveStrength)) +
geom_line()
View(training)
ggplot(training, aes(x=row.names, y=CompressiveStrength)) +
geom_line()
View(training)
str(training)
row.names(training)
ggplot(training, aes(x=row.names(training), y=CompressiveStrength)) +
geom_line()
ggplot(training, aes(y=CompressiveStrength)) +
geom_line()
ggplot(training, aes(x=trainIndex, y=CompressiveStrength)) +
geom_line()
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$SuperPlasticizer)
?qplot
qplot(SuperPlasticizer, training)
qplot(SuperPlasticizer, training, geom="histogram")
qplot(SuperPlasticizer, concrete, geom="histogram")
str(concrete)
qplot(Superplasticizer, concrete, geom="histogram")
qplot(Superplasticizer, data=concrete, geom="histogram")
qplot(Superplasticizer, data=training, geom="histogram")
table(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predVar <- grep("IL", names(training))
names(training)[predVar]
predVar <- grep("^IL", names(training))
names(training)[predVar]
predVar <- names(training)grep("^IL", names(training))
predVar <- names(training)[grep("^IL", names(training))]
predVar
?preProcess
grep("^IL", names(training))
predVar <- grep("^IL", names(training))
preProc <- preProcess(training[predVar])
str(training[predVar])
preProc <- preProcess(training[predVar], method="pca")
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
preProc
preProcess(training[predVar], method="pca", thresh=0.8)
preProcess(training[predVar], method="pca")
names(preProcess(training[predVar], method="pca", thresh=0.8))
names(summary(preProcess(training[predVar], method="pca", thresh=0.8)))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing = adData[-inTrain,]
predVar <- grep("^IL", names(training))
names(training)
predVar <- grep("^IL|^diagnosis$", names(training))
training <- training[var]
var <- grep("^IL|^diagnosis$", names(training))
training <- training[var]
var <- grep("^IL|^diagnosis$", names(training))
preProc <- preProcess(training[var], method="pca", thresh=0.8)
predVar <- grep("^IL", names(training))
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
preProc
?predict
str(training)
qplot(IL_11, data=training)
qplot(data=training)
M0 <- train(training$diagnosis ~ training[predVar], method="glm")
training = adData[ inTrain,]
testing = adData[-inTrain,]
predVar <- grep("^IL", names(training))
M0 <- train(training$diagnosis ~ training[predVar], method="glm")
M0 <- train(training$diagnosis ~ ., data=training[predVar], method="glm")
hat0 <- predict(M1, test)
hat0 <- predict(M0, test)
hat0 <- predict(M0, testing)
confusionMatrix(testing$diagnosis, hat0)
?train
M1 <- train(training$diagnosis ~ ., data=training[predVar], method="glm", preProcess="pca", thresh=0.8)
M1 <- train(training$diagnosis ~ ., data=training[predVar], method="glm", preProcess="pca")
hat1 <- predict(M1, testing)
confusionMatrix(testing$diagnosis, hat1)
M1
M0
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
hat1 <- predict(preProc, testing)
hat1 <- predict(preProc, testing$dianosis)
preProc
hat1 <- predict(preProc, testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predVar <- grep("^IL", names(training))
M0 <- train(training$diagnosis ~ ., data=training[predVar], method="glm")
hat0 <- predict(M0, testing)
confusionMatrix(testing$diagnosis, hat0)
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
hat1 <- predict(preProc, testing$diagnosis)
confusionMatrix(testing$diagnosis, hat1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predVar <- grep("^IL", names(training))
M0 <- train(training$diagnosis ~ ., data=training[predVar], method="glm")
hat0 <- predict(M0, testing)
confusionMatrix(testing$diagnosis, hat0)
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
hat1 <- predict(preProc, testing$diagnosis)
trainPC <- predict(preProc, training[predVar])
M1 <- train(training$diagnosis ~ ., data=trainPC, method="glm")
hat1 <- predict(preProc, testing[predVar])
confusionMatrix(testing$diagnosis, hat1)
testPC <- predict(preProc, testing[predVar])
hat1 <- predict(M1, testing)
hat1 <- predict(M1, testPC)
confusionMatrix(testing$diagnosis, hat1)
M1
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predVar <- grep("^IL", names(training))
M0 <- train(training$diagnosis ~ ., data=training[predVar], method="glm")
hat0 <- predict(M0, testing)
confusionMatrix(testing$diagnosis, hat0)
preProc <- preProcess(training[predVar], method="pca", thresh=0.8)
trainPC <- predict(preProc, training[predVar])
M1 <- train(training$diagnosis ~ ., data=trainPC, method="glm")
testPC <- predict(preProc, testing[predVar])
hat1 <- predict(M1, testPC)
confusionMatrix(testing$diagnosis, hat1)
setwd("~/GitHub Repositories/Coursera/PracticalMachineLearning")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
drop <- c("V1")
DTrain <- fread(url, drop=drop)
getwd()
setwd("~/GitHub repositories/PracticalMachineLearning")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
drop <- c("V1")
DTrain <- fread(url, drop=drop)
DTrain <- DTrain[, classe := factor(classe)]
is.factor(DTrain[, classe])
DTrain[, .N, classe]
colNames <- names(DTrain)
colNumeric <- grep("belt|arm|dumbbell|forearm", colNames)
colNonNumeric <- grep("belt|arm|dumbbell|forearm", colNames, invert=TRUE)
DTrain <- data.table(DTrain[, colNonNumeric, with=FALSE], data.matrix(DTrain[, colNumeric, with=FALSE]))
DTrain[, classe]
DTrain[, colNumeric, with=FALSE]
DTrain <- data.table(DTrain[, classe], DTrain[, colNumeric, with=FALSE])
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
drop <- c("V1")
DTrain <- fread(url, drop=drop)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
DTrain <- DTrain[, classe := factor(classe)]
is.factor(DTrain[, classe])
DTrain[, .N, classe]
colNames <- names(DTrain)
colNumeric <- grep("belt|arm|dumbbell|forearm", colNames)
colNonNumeric <- grep("belt|arm|dumbbell|forearm", colNames, invert=TRUE)
DTrain <- data.table(DTrain[, classe], DTrain[, colNumeric, with=FALSE])
str(DTrain[, classe])
names(DTrain)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
DTrain <- DTrain[, classe := factor(classe)]
str(DTrain[, classe])
DTrain[, .N, classe]
predVar <- grep("belt|arm|dumbbell|forearm", names(DTrain))
data.table(DTrain[, classe], DTrain[, predVar, with=FALSE])
DTrain[, classe]
DTrain[, list(classe)]
data.table(DTrain[, list(classe)], DTrain[, predVar, with=FALSE])
predVar <- grep("belt$|arm$|dumbbell$|forearm$", names(DTrain))
DTrain <- data.table(DTrain[, list(classe)], DTrain[, predVar, with=FALSE])
names(DTrain)
colNames
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
DTrain <- DTrain[, classe := factor(classe)]
str(DTrain[, classe])
DTrain[, .N, classe]
predVarCol <- grep("belt$|arm$|dumbbell$|forearm$|x$|y$|z$", names(DTrain))
predVar <- DTrain[, predVarCol, with=FALSE]
str(predVar)
predVar <- data.matrix(predVar)
DTrain <- data.table(DTrain[, list(classe)], predVar)
str(DTrain)
table(is.na(DTrain[, list(roll_dumbbell]))
table(is.na(DTrain[, list(roll_dumbbell]))
require(data.table)
table(is.na(DTrain[, list(roll_dumbbell]))
table(is.na(DTrain[, list(roll_dumbbell)]))
table(is.na(DTrain[, list(total_accel_dumbbell)]))
table(is.na(DTrain[, list(gyros_arm_x)]))
table(is.na(DTrain[, list(var_roll_dumbbell)]))
table(DTrain[, total_accel_dumbbell])
table(is.na(DTrain[, total_accel_dumbbell]))
table(is.na(DTrain[, gyros_arm_x]))
table(is.na(DTrain[, gyros_arm_y]))
table(is.na(DTrain[, gyros_arm_z]))
table(is.na(DTrain[, accel_arm_z]))
table(is.na(DTrain[, magnet_arm_z]))
table(is.na(DTrain[, yaw_arm]))
table(is.na(DTrain[, pitch_arm]))
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
DTrain <- DTrain[, classe := factor(classe)]
str(DTrain[, classe])
DTrain[, .N, classe]
predVarCol <- grep("belt$|arm$|dumbbell$|forearm$|x$|y$|z$", names(DTrain))
regex <- "^roll|^pitch|^yaw|^total_accel|^gyros|^accel|^magnet"
predVarCol <- grep(regex, names(DTrain))
predVar <- DTrain[, predVarCol, with=FALSE]
str(predVar)
DTrain <- data.table(DTrain[, list(classe)], predVar)
install.packages("doParallel")
require(caret)
require(parallel)
require(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
M <- train(classe ~ .,
data=DTrain,
method="rpart",
preProcess=c("center", "scale"),
trControl=ctrl)
stopCluster(cl)
M
confusionMatrix(predict(M), DTrain[, classe])
confusionMatrix(predict(M), DTrain[, list(classe)])
DTrain[, list(classe)]
str(DTrain)
confusionMatrix(predict(M), DTrain[, .outcome])
plot(M)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
DTrain <- DTrain[, classe := factor(classe)]
str(DTrain[, classe])
DTrain[, .N, classe]
regex <- "^roll|^pitch|^yaw|^total_accel|^gyros|^accel|^magnet"
predVarCol <- grep(regex, names(DTrain))
predVar <- DTrain[, predVarCol, with=FALSE]
DTrain <- data.table(DTrain[, list(classe)], predVar)
str(DTrain)
require(caret)
M <- train(classe ~ .,
data=DTrain,
method="rf",
preProcess=c("center", "scale"))
install.packages("randomForest")
install.packages("randomForest")
M <- train(classe ~ .,
data=DTrain,
method="rf",
preProcess=c("center", "scale"))
require(caret)
M <- train(classe ~ .,
data=DTrain,
method="rf",
preProcess=c("center", "scale"))
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DTrain <- fread(url)
str(DTrain[, classe])
DTrain <- DTrain[, classe := factor(classe)]
str(DTrain[, classe])
DTrain[, .N, classe]
regex <- "^roll|^pitch|^yaw|^total_accel|^gyros|^accel|^magnet"
predVarCol <- grep(regex, names(DTrain))
predVar <- DTrain[, predVarCol, with=FALSE]
DTrain <- cbind(DTrain[, classe], predVar)
names(DTrain)
classe <- DTrain[, classe := factor(classe)]
DTrain <- fread(url)
classe <- DTrain[, classe := factor(classe)]
classe <- factor(DTrain[, classe])
is.factor(classe)
table(classe)
DTrain <- data.table(classe, predVar)
names(DTrain)
str(DTrain)
require(caret)
require(parallel)
require(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
preProc <- preProcess(predVar, method="pca")
trainPC <- predict(preProc, DTrain[, predVarCol, with=FALSE])
trainPC <- predict(preProc, predVar)
preProc
names(trainPC)
names(trainPC)
M <- train(classe ~ .,
data=trainPC,
method="rpart",
trControl=ctrl)
M
confusionMatrix(predict(M), classe)
plot(M)
names(trainPC)
M <- train(classe ~ .,
data=trainPC,
method="glm",
trControl=ctrl)
preProc <- preProcess(predVar, method="pca", tresh=0.8)
preProc <- preProcess(predVar, method="pca", thresh=0.8)
preProc
preProc <- preProcess(predVar, method="pca")
trainPC <- predict(preProc, predVar)
names(trainPC)
M <- train(classe ~ .,
data=predVar,
method="rpart",
trControl=ctrl)
confusionMatrix(predict(M), classe)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
classe <- factor(D[, classe])
is.factor(classe)
table(classe)
regex <- "^roll|^pitch|^yaw|^total_accel|^gyros|^accel|^magnet"
predVarCol <- grep(regex, names(D))
predVar <- D[, predVarCol, with=FALSE]
DTrain <- data.table(classe, predVar)
str(DTrain)
sum(is.na(DTrain))
require(caret)
preProc <- preProcess(predVar)
preProc
DTrainCS <- data.table(classe, predict(preProc, predVar))
histGroup <- function (data, regex) {
col <- grep(regex, names(data))
require(reshape2)
n <- nrow(data)
DMelted <- melt(data[, col, with=FALSE][, rownum := seq(1, n)], id.vars="rownum")
require(ggplot2)
ggplot(DMelted, aes(x=value)) +
geom_histogram() +
facet_wrap(~ variable, scale="free_x")
}
histGroup(DTrainCS, "belt")
histGroup(DTrainCS, "[^(fore)]arm")
histGroup(DTrainCS, "dumbbell")
histGroup(DTrainCS, "forearm")
?plotmatrix
col <- grep("belt", names(DTrainCS))
plotmatrix(DTraincs[, col, with=FALSE])
?featurePlot
featurePlot(DTraincs[, col, with=FALSE])
featurePlot(DTrainCS[, col, with=FALSE])
featurePlot(DTrainCS[, col, with=FALSE], classe)
featurePlot(DTrainCS[, col, with=FALSE], classe, plot="pairss")
featurePlot(DTrainCS[, col, with=FALSE], classe, plot="pairs")
install.packages("gbm")
install.packages("bag")
